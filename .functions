#!/bin/bash
showandrun()
{
	echo "Command:\n$@\n"
	eval "$@"
}

git() {
	if [[ "$1" == "add" ]] &&
	   [[ "$2" == "-p" ]] || [[ "$2" == "--patch" ]]
	then
		tabs -c3
		if [[ "$#" -eq 2 ]]
		then
			command git add -p
		else
			command git add -p "$3"
		fi
		tabs -4
		#echo sukses
	else
		command git "$@"
	fi
}

rmd()
{
	pandoc $1 | lynx -stdin
}

dsize()
{
	echo "du -ah --max-depth=1 | sort -hr"
	du -ah --max-depth=1 | sort -hr
}

# same as cd, except:
# - no need to wrap path containing spaces with quotes.
# - if the argument is a file, cd to the directory containing that file.
# - after the directory changed, list all directories and files.
to()
{
	local arg="$@"
	if [ ! -d "$arg" ]
	then
		local dir="$(dirname "$arg")"
	else
		local dir="$arg"
	fi
	cd "$dir"
	ls -A
}

gcheck()
{
	inen "$(enin "$1")"
}

mkcd()
{
	if [ -d $1 ]
	then
		echo $1 directory already exists, changing directory to it.
	else
		mkdir -p $1
	fi
	cd $1
	l
}

cpcontent()
{
	echo "xsel -b < $1"
	xsel -b < $1
}

# Source: https://stackoverflow.com/a/638980/9157799
checkfile()
{
	if [ -f $1 ]
	then
		echo $1 found
	else
		echo $1 not found
	fi
}

# Source: https://stackoverflow.com/a/59839/9157799
checkdir()
{
	if [ -d $1 ]
	then
		echo $1 found
	else
		echo $1 not found
	fi
}

run()
{
	if [ ! -d Classes ] && [ ${1: -5} = ".java" ]
	then
		mkdir Classes
		echo "mkdir Classes"
	fi

	# if there is 1 argument and the last 5 char of it is ".java"
	# Source: https://stackoverflow.com/a/19858692/9157799
	if [ ${1: -5} = ".java" ]
	then
		# Source: https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash#comment71002787_27658733
		1=${1:0:-5}
		if [ $# -eq 2 ] # Source: https://stackoverflow.com/a/6482403/9157799
		then
			echo "javac -d Classes -cp \".:Jars/*:Packages:$2\" $1.java && java -cp \"Classes:$2\" $1\nOutput:"
			javac -d Classes -cp ".:Jars/*:Packages:$2" $1.java && java -cp "Classes:$2" $1
		else
			echo "javac -d Classes -cp \".:Jars/*:Packages\" $1.java && java -cp \"Classes\" $1\nOutput:"
			javac -d Classes -cp ".:Jars/*:Packages" $1.java && java -cp "Classes" $1
		fi
	elif [ ${1: -4} = ".cpp" ] || [ ${1: -2} = ".c" ]
	then
		if [ ${1: -4} = ".cpp" ]
		then
			executableName=${1:0:-4} # Jika arg pertama "Main.cpp", maka executableName -> "Main"
		else
			executableName=${1:0:-2}
		fi
		testlibPath=$HOME/Projects/C++/testlib
		run_command="g++ -g -o $executableName -I$testlibPath $@ && ./$executableName"
		echo "$run_command\nOutput:"
		eval "$run_command" # https://stackoverflow.com/a/2005201/9157799
		return
	fi
}

runo()
{
	if [ ! -d Classes ]
	then
		mkdir Classes
		echo "mkdir Classes"
	fi

	# Source: https://stackoverflow.com/a/19858692/9157799
	if [ ${1: -5} = ".java" ]
	then
		# Source: https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash#comment71002787_27658733
		1=${1:0:-5}
	fi

	if [ $# -eq 2 ] # Source: https://stackoverflow.com/a/6482403/9157799
	then
		echo "javac -d Classes -cp \".:Jars/*:Packages:$2\" $1.java && java -cp \"Classes:$2\" $1 > output.txt"
		javac -d Classes -cp ".:Jars/*:Packages:$2" $1.java && java -cp "Classes:$2" $1 > output.txt
	else
		echo "javac -d Classes -cp \".:Jars/*:Packages\" $1.java && java -cp \"Classes\" $1 > output.txt"
		javac -d Classes -cp ".:Jars/*:Packages" $1.java && java -cp "Classes" $1 > output.txt
	fi
}

# compile package
cpac()
{
	if [ $1 = "" ]
	then
		echo "Please specify the source files location"
	else
		if [ ! -d Classes ]
		then
			dqt='"'
			mkdir Classes
			echo "${dqt}Classes${dqt} directory created"
		fi

		if [ $# -eq 1 ]
		then
			javac -d Classes $(find $1 -name '*.java')
		else
			javac -d Classes -cp $2 $(find $1 -name '*.java')
		fi
	fi
}

# Use quotation mark if you use more than 1 word:
#	ff 'ompetiti.*gram'
#
# `locate` is way faster than `find`, but in rare cases, it can be innaccurate
# as it only update the database once every day.
ff()
{
	echo "locate -bir \"$1\" | grep \"`pwd`\""
	locate -bir "$1" | grep "`pwd`"
	echo "\nuse ffsafe for accurate but slower result."
}

# safer version of ff above
ffsafe()
{
	echo "find . -name \"*$1*\""
	find . -name "*$1*" | grep "$1"
}

findinfiles()
{
	if [ $# -gt 1 ]
	then
		echo "Put multiple words in double quotes!"
	else
		echo "grep -iRI \"$@\""
		grep -iRI "$@"
	fi
}

copy()
{
	if [ $# -eq 0 ]
	then
		pwd | xclip
	else
		echo $# > ~/.numToCopy

		# Source: https://stackoverflow.com/a/5265775/9157799
		readlink -f "$@" | xclip
	fi
	echo "copy" > ~/.copyOrMove
}

move()
{
	copy "$@"
	echo "move" > ~/.copyOrMove
}

paste()
{
	for number in {1..$(cat ~/.numToCopy)}
	do
		pathToCopy="$(xclip -o | head -$number | tail -1)"

		if [ -d "$pathToCopy" ] # If it's a directory
		then
			cp -r "$pathToCopy" .
		else
			cp "$pathToCopy" .
		fi

		if [ $(cat ~/.copyOrMove) = "move" ]
		then
			rm -rf "$pathToCopy"
		fi
	done
}

p()
{
	propose_dir_path
	paste
}

watchgdb()
{
	#echo '' > gdb.out
	cat /dev/null > gdb.out
	echo "tail -f gdb.out"
	tail -f gdb.out
}

work()
{
	if [ $# -ne 1 ]
	then
		echo "Put the number of minutes as an argument!"
	else
		echo "td $1m && notify-send \"$1M GOAL REACHED!\" && td"
		td $1m && notify-send "$1M GOAL REACHED!" && td
	fi
}

cpdiff()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: cpdiff [file1] [file2]"
		return
	fi

	nl $1 > deletethis
	nl $2 > deletethistoo
	gdcol --no-index deletethis deletethistoo
	rm deletethis deletethistoo
}

beda()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: beda [file1] [file2]"
		return
	fi

	gd --no-index "$1" "$2"
}

bedacol()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: bedacol [file1] [file2]"
		return
	fi

	gdcol --no-index "$1" "$2"
}

# Source: https://stackoverflow.com/a/11145362/9157799
replaceline()
{
	if [ $# -ne 3 ]
	then
		echo -e "usage: replaceline [line number] [new string] [file]"
		return
	fi

	sed -i "$1s/.*/$2/" $3
}

# Source: https://stackoverflow.com/a/20026432/9157799
getlinenumber()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: getlinenumber [substring] [file]"
		return
	fi

	awk "/$1/{print NR; exit}" $2
}

get_nth_line_of_file()
{
	cat "$2" | head -$1 | tail -1
}

# Source: https://stackoverflow.com/q/21600584/9157799
deletelinenumber()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: deletelinenumber [line number] [file]"
		return
	fi

	sed -i $1d $2
}

# view GitHub repo of current directory
# Source: https://gist.github.com/igrigorik/6666860
gh()
{
	repoURL=$(git config remote.origin.url | sed "s~git@\(.*\):\(.*\)~https://\1/\2~" | sed "s~\(.*\).git\$~\1~")
	branch=$(git branch | grep \* | cut -d ' ' -f2)
	relativePath=$(git rev-parse --show-prefix)
	google-chrome "$repoURL/tree/$branch/$relativePath$1"
}

untar()
{
	if [ $# -eq 0 ] || [ $# -gt 2 ]
	then
		echo -e "usage: untar [tar file] [destination]"
		return
	fi

	theCommand="tar xvf"
	if [ ${1: -3} = ".gz" ]
	then
		theCommand="$theCommand""z"
	fi

	if [ $# -eq 1 ]
	then
		eval "$theCommand ""$1"
	elif [ $# -eq 2 ]
	then
		eval "$theCommand ""$1"" -C ""$2"
	fi
}

# Source: https://stackoverflow.com/a/965069/9157799
getextension()
{
	echo "${1#*.}"
}

numberoffiles()
{
	echo "$(ls -1 $1 | wc -l)"
}

calc()
{
	# Source: https://stackoverflow.com/a/2043499/9157799
	echo "print($@)" | python3
}

path()
{
	if [ $# -eq 0 ]
	then
		# show file path
		cat ~/.path
	else
		# save file path
		readlink -f "$1" > ~/.path
	fi
}

linkpath()
{
	echo "ln -s \"`path`\" ./$1"
	ln -s "`path`" ./"$1"
}

mp3()
{
	# https://askubuntu.com/a/316048/356625
	ffplay -nodisp -autoexit "$1" 2> /dev/null
}

tts()
{
	input="$@"

	# https://stackoverflow.com/a/56321886/9157799
	query=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$input'))")

	# https://stackoverflow.com/a/10054006/9157799
	curl -sH 'Referer: http://translate.google.com/' -H 'User-Agent: stagefright/1.2 (Linux;Android 5.0)' "https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&tl=en&q=$query" > ~/.tts.mp3

	mp3 ~/.tts.mp3
	rm ~/.tts.mp3
}

tox()
{
	touch "$@"
	chmod +x "$@"
}

lmgt()
{
	input="$@"
	query=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$input'))")
	url="http://letmegooglethat.com/?q=$query"
	echo $url
	echo $url | clip && echo "url copied to clipboard."
}

numberofline()
{
	# https://askubuntu.com/a/1173476/356625
	grep "" -c "$@"
}

# clear current line and echo
echoinplace()
{
	# https://unix.stackexchange.com/a/43081/307359
	printf "\033[K"
	echo -ne "\r$@"
}

temp_dir()
{
	if [ `pwd` = $HOME ]
	then
		cd temp
	else
		# https://askubuntu.com/a/1174669/356625
		gnome-terminal --tab --working-directory=$HOME/temp; xdotool key alt+9
	fi
}

get_nth_file()
{
	# get_nth_file [number] [directory]
	# https://unix.stackexchange.com/a/33913/307359
	ls "$2" | sort -n | head -$1 | tail -1
}

extension()
{
	# https://stackoverflow.com/a/965069/9157799
	echo "${1#*.}"
}

delete_branch()
{
	echo "gp origin :<branch_name>"  # remote
	echo "gb -D <branch_name>"       # local
}

# https://stackoverflow.com/a/12230307/9157799
susudo ()
{
    local _funcname_="$1"

    local params=( "$@" )             ## array containing all params passed here
    local tmpfile="/dev/shm/$RANDOM"  ## temporary file
    local content                     ## content of the temporary file
    local regex                       ## regular expression

    # Shift the first param (which is the name of the function)
	# https://unix.stackexchange.com/a/68323/307359
	params=("${params[@]:1}")     ## remove first element

    content="#!/bin/bash\n\nsource $HOME/.sharedsources\n"

    # Write the params array
    content="${content}params=(\n"

    regex="\s+"
    for param in "${params[@]}"
    do
        if [[ "$param" =~ $regex ]]
            then
                content="${content}\t\"${param}\"\n"
            else
                content="${content}\t${param}\n"
        fi
    done

    content="$content)\n"
    echo -e "$content" > "$tmpfile"

    # Append the call to the function
    echo -e "\n$_funcname_ \"\${params[@]}\"\n" >> "$tmpfile"

    sudo bash "$tmpfile"
    rm "$tmpfile"
}

replaceinfiles()
{
	# https://stackoverflow.com/a/21335519/9157799
	find ./ -type f -exec sed -i "s/$1/$2/g" {} \;

	# https://stackoverflow.com/a/54965955/9157799
	if [ -f .git/index ]
	then
		echo ".git/index detected."
		showandrun 'rm .git/index'
		showandrun 'git reset'
	fi
}

# https://askubuntu.com/a/282105/356625
pdfextract()
{
	# this function uses 3 arguments:
	#     $1 is the first page of the range to extract
	#     $2 is the last page of the range to extract
	#     $3 is the input file
	#     output file will be named "inputfile_pXX-pYY.pdf"
	gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
	   -dFirstPage="${1}" \
	   -dLastPage="${2}" \
	   -sOutputFile="${3%.pdf}_p${1}-p${2}.pdf" \
	   "${3}"
}

flutter_create()
{
	echo 'flutter create --org com.yourdomain appname'
}

line()
{
	head -$1 | tail -1
}

# https://gist.github.com/junegunn/f4fca918e937e6bf5bad#gistcomment-2731105
# my git log
mgl()
{
	ggloga --color=always | \
	    fzf --ansi --no-sort --reverse --tiebreak=index --preview \
			'source ~/.alias; f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1 ; }; f \
			"$(ggloga | head -$(({n} + 2)) | tail -2)"' \
			--bind 'ctrl-j:preview-down,ctrl-k:preview-up,alt-j:preview-page-down,alt-k:preview-page-up,ctrl-m:execute: \
			(git log --graph --pretty=format:"%C(bold blue)%s%C(auto)%d%n%C(yellow)%h%Creset %an, %C(magenta)%ar%Creset at %C(cyan)%ad%n%b" --date=format:"%H:%M" --author-date-order --all | head -$(({n} +2)) | tail -2 | grep -o "[a-f0-9]\{7\}" | head -1 |
			 xargs -I % sh -c "git show --color=always % | less -R") << "FZF-EOF"
			 {}
FZF-EOF' --preview-window=right:60%
}

# fzf, but the output are copied to the clipboard
# note: ch depend on this
f()
{
	# https://stackoverflow.com/a/46726373/9157799
	if [ -p /dev/stdin ]
	then
		stdin=$(</dev/stdin)

		# hack
		# fzo=$(echo "$stdin" | fzf "$@")    harusnya ini bisa
		echo "$stdin" | fzf "$@" | xclip
		fzo="$(xclip -o)"
	else
		fzo=$(fzf "$@")
	fi
	if [ "$fzo" != "" ]
	then
		echo -n "$fzo" | xclip -se c
		echo "$fzo"
	fi
}
