#!/bin/bash
git() {
	if [[ "$1" == "add" ]] &&
	   [[ "$2" == "-p" ]] || [[ "$2" == "--patch" ]]
	then
		tabs -c3
		if [[ "$#" -eq 2 ]]
		then
			command git add -p
		else
			command git add -p "$3"
		fi
		tabs -4
		#echo sukses
	else
		command git "$@"
	fi
}

rmd()
{
	pandoc $1 | lynx -stdin
}

dsize()
{
	echo "du -ah --max-depth=1 | sort -hr"
	du -ah --max-depth=1 | sort -hr
}

to()
{
	if [ ! -d "$1" ]
	then
		1="$(dirname $1)"
	fi
	cd "$1"
	ls -A
}

gcheck()
{
	inen "$(enin "$1")"
}

mkcd()
{
	mkdir -p $1
	cd $1
}

cpcontent()
{
	echo "xsel -b < $1"
	xsel -b < $1
}

# Source: https://stackoverflow.com/a/638980/9157799
checkfile()
{
	if [ -f $1 ]
	then
		echo $1 found
	else
		echo $1 not found
	fi
}

# Source: https://stackoverflow.com/a/59839/9157799
checkdir()
{
	if [ -d $1 ]
	then
		echo $1 found
	else
		echo $1 not found
	fi
}

run()
{
	if [ ! -d Classes ] && [ ${1: -5} = ".java" ]
	then
		mkdir Classes
		echo "mkdir Classes"
	fi

	# if there is 1 argument and the last 5 char of it is ".java"
	# Source: https://stackoverflow.com/a/19858692/9157799
	if [ ${1: -5} = ".java" ]
	then
		# Source: https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash#comment71002787_27658733
		1=${1:0:-5}
		if [ $# -eq 2 ] # Source: https://stackoverflow.com/a/6482403/9157799
		then
			echo "javac -d Classes -cp \".:Jars/*:Packages:$2\" $1.java && java -cp \"Classes:$2\" $1\nOutput:"
			javac -d Classes -cp ".:Jars/*:Packages:$2" $1.java && java -cp "Classes:$2" $1
		else
			echo "javac -d Classes -cp \".:Jars/*:Packages\" $1.java && java -cp \"Classes\" $1\nOutput:"
			javac -d Classes -cp ".:Jars/*:Packages" $1.java && java -cp "Classes" $1
		fi
	elif [ ${1: -4} = ".cpp" ] || [ ${1: -2} = ".c" ]
	then
		if [ ${1: -4} = ".cpp" ]
		then
			executableName=${1:0:-4} # Jika arg pertama "Main.cpp", maka executableName -> "Main"
		else
			executableName=${1:0:-2}
		fi
		testlibPath=$HOME/Projects/C++/testlib
		run_command="g++ -g -o $executableName -I$testlibPath $@ && ./$executableName"
		echo "$run_command\nOutput:"
		eval "$run_command" # https://stackoverflow.com/a/2005201/9157799
		return
	fi
}

runo()
{
	if [ ! -d Classes ]
	then
		mkdir Classes
		echo "mkdir Classes"
	fi

	# Source: https://stackoverflow.com/a/19858692/9157799
	if [ ${1: -5} = ".java" ]
	then
		# Source: https://stackoverflow.com/questions/27658675/how-to-remove-last-n-characters-from-a-string-in-bash#comment71002787_27658733
		1=${1:0:-5}
	fi

	if [ $# -eq 2 ] # Source: https://stackoverflow.com/a/6482403/9157799
	then
		echo "javac -d Classes -cp \".:Jars/*:Packages:$2\" $1.java && java -cp \"Classes:$2\" $1 > output.txt"
		javac -d Classes -cp ".:Jars/*:Packages:$2" $1.java && java -cp "Classes:$2" $1 > output.txt
	else
		echo "javac -d Classes -cp \".:Jars/*:Packages\" $1.java && java -cp \"Classes\" $1 > output.txt"
		javac -d Classes -cp ".:Jars/*:Packages" $1.java && java -cp "Classes" $1 > output.txt
	fi
}

# compile package
cpac()
{
	if [ $1 = "" ]
	then
		echo "Please specify the source files location"
	else
		if [ ! -d Classes ]
		then
			dqt='"'
			mkdir Classes
			echo "${dqt}Classes${dqt} directory created"
		fi

		if [ $# -eq 1 ]
		then
			javac -d Classes $(find $1 -name '*.java')
		else
			javac -d Classes -cp $2 $(find $1 -name '*.java')
		fi
	fi
}

# ! Use quotation mark if you use more than 1 word
#	findfile 'ompetiti*gram'
findfile()
{
	echo "find . -name \"*$1*\""
	find . -name "*$1*"
}

findinfiles()
{
	if [ $# -gt 1 ]
	then
		echo "Put multiple words in double quotes!"
	else
		echo "grep -iRI \"$@\""
		grep -iRI "$@"
	fi
}

copy()
{
	if [ $# -eq 0 ]
	then
		pwd | xclip
	else
		echo $# > ~/.numToCopy
		echo "copy" > ~/.copyOrMove

		# Source: https://stackoverflow.com/a/5265775/9157799
		readlink -f "$@" | xclip
	fi
}

move()
{
	copy "$@"
	echo "move" > ~/.copyOrMove
}

paste()
{
	for number in {1..$(cat ~/.numToCopy)}
	do
		pathToCopy="$(xclip -o | head -$number | tail -1)"

		if [ -d "$pathToCopy" ] # If it's a directory
		then
			cp -r "$pathToCopy" .
		else
			cp "$pathToCopy" .
		fi

		if [ $(cat ~/.copyOrMove) = "move" ]
		then
			rm -rf "$pathToCopy"
		fi
	done
}

p()
{
	propose_dir_path
	paste
}

watchgdb()
{
	#echo '' > gdb.out
	cat /dev/null > gdb.out
	echo "tail -f gdb.out"
	tail -f gdb.out
}

work()
{
	if [ $# -ne 1 ]
	then
		echo "Put the number of minutes as an argument!"
	else
		echo "td $1m && notify-send \"$1M GOAL REACHED!\" && td"
		td $1m && notify-send "$1M GOAL REACHED!" && td
	fi
}

cpdiff()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: cpdiff [file1] [file2]"
		return
	fi

	nl $1 > deletethis
	nl $2 > deletethistoo
	gdcol --no-index deletethis deletethistoo
	rm deletethis deletethistoo
}

# Source: https://stackoverflow.com/a/11145362/9157799
replaceline()
{
	if [ $# -ne 3 ]
	then
		echo -e "usage: replaceline [line number] [new string] [file]"
		return
	fi

	sed -i "$1s/.*/$2/" $3
}

# Source: https://stackoverflow.com/a/20026432/9157799
getlinenumber()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: getlinenumber [substring] [file]"
		return
	fi

	awk "/$1/{print NR; exit}" $2
}

# Source: https://stackoverflow.com/q/21600584/9157799
deletelinenumber()
{
	if [ $# -ne 2 ]
	then
		echo -e "usage: deletelinenumber [line number] [file]"
		return
	fi

	sed -i $1d $2
}

# view GitHub repo of current directory
# Source: https://gist.github.com/igrigorik/6666860#gistcomment-2888787
gh()
{
	repoURL=https://github.$(git config remote.origin.url | cut -f2 -d.)
	branch=$(git branch | grep \* | cut -d ' ' -f2)
	relativePath=$(git rev-parse --show-prefix)
	google-chrome "$repoURL/tree/$branch/$relativePath$1"
}

untar()
{
	if [ $# -eq 0 ] || [ $# -gt 2 ]
	then
		echo -e "usage: untar [tar file] [destination]"
		return
	fi

	theCommand="tar xvf"
	if [ ${1: -3} = ".gz" ]
	then
		theCommand="$theCommand""z"
	fi

	if [ $# -eq 1 ]
	then
		eval "$theCommand ""$1"
	elif [ $# -eq 2 ]
	then
		eval "$theCommand ""$1"" -C ""$2"
	fi
}

# Source: https://stackoverflow.com/a/965069/9157799
getextension()
{
	echo "${1#*.}"
}

numberoffiles()
{
	echo "$(ls -1 $1 | wc -l)"
}

calc()
{
	# Source: https://stackoverflow.com/a/2043499/9157799
	echo "print($@)" | python3
}

path()
{
	if [ $# -eq 0 ]
	then
		# show file path
		cat ~/.path
	else
		# save file path
		readlink -f "$1" > ~/.path
	fi
}

linkpath()
{
	echo "ln -s \"`path`\" ./$1"
	ln -s "`path`" ./"$1"
}

mp3()
{
	# https://askubuntu.com/a/316048/356625
	ffplay -nodisp -autoexit "$1" 2> /dev/null
}

tts()
{
	query=$(echo $@ | sed -E 's/\s{1,}/\+/g')

	# https://stackoverflow.com/a/10054006/9157799
	curl -sH 'Referer: http://translate.google.com/' -H 'User-Agent: stagefright/1.2 (Linux;Android 5.0)' "https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&tl=en&q=$query" > ~/.tts.mp3

	mp3 ~/.tts.mp3
	rm ~/.tts.mp3
}

tox()
{
	touch "$@"
	chmod +x "$@"
}
